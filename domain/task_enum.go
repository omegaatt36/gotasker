// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package domain

import (
	"errors"
	"fmt"
)

const (
	// TaskStatusIncomplete is a TaskStatus of type Incomplete.
	TaskStatusIncomplete TaskStatus = iota
	// TaskStatusCompleted is a TaskStatus of type Completed.
	TaskStatusCompleted
)

var ErrInvalidTaskStatus = errors.New("not a valid TaskStatus")

const _TaskStatusName = "incompletecompleted"

var _TaskStatusMap = map[TaskStatus]string{
	TaskStatusIncomplete: _TaskStatusName[0:10],
	TaskStatusCompleted:  _TaskStatusName[10:19],
}

// String implements the Stringer interface.
func (x TaskStatus) String() string {
	if str, ok := _TaskStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TaskStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TaskStatus) IsValid() bool {
	_, ok := _TaskStatusMap[x]
	return ok
}

var _TaskStatusValue = map[string]TaskStatus{
	_TaskStatusName[0:10]:  TaskStatusIncomplete,
	_TaskStatusName[10:19]: TaskStatusCompleted,
}

// ParseTaskStatus attempts to convert a string to a TaskStatus.
func ParseTaskStatus(name string) (TaskStatus, error) {
	if x, ok := _TaskStatusValue[name]; ok {
		return x, nil
	}
	return TaskStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidTaskStatus)
}
